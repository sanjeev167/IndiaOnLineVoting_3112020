/**
 * 
 */
package com.pon.pub.hm.service;

import com.pon.pub.hm.dto.RegistrationDTO;
import com.pon.web.adm.pvt.sec.rbac.dto.RegistrationDTO;
import com.pon.web.adm.pvt.sec.rbac.entity.UserReg;
import com.support.custom.exception.CustomRuntimeException;
import com.support.custom.exception.ExceptionApplicationUtility;

/**
 * @author Sanjeev
 *
 */
public class RegistrationServiceImpl implements RegistrationService{
	log.info("     RegistrationServiceImpl :==> loadGrid ==> Started");
	
	
	
	
	
	// This will directly put your result into your mapped dto
		@Override
		public RegistrationDTO getReordById(Integer id) throws CustomRuntimeException {
			log.info("     UserAccountServiceImpl :==> getReordById ==> Started");
			RegistrationDTO registrationDTO = null;
			try {
				UserReg userReg = appAdminUserRepository.getOne(id);
				registrationDTO = new RegistrationDTO();
				registrationDTO.setId(userReg.getId());
				registrationDTO.setDepartmentNameId(userReg.getUserCategory().getDepartmentMaster().getId() + "");
				registrationDTO.setCategoryNameId(userReg.getUserCategory().getId() + "");
				registrationDTO.setName(userReg.getName());
				registrationDTO.setUserLoginId(userReg.getEmail());
				registrationDTO.setPassword(userReg.getPassword());
			} catch (Exception ex) {
				throw ExceptionApplicationUtility.wrapRunTimeException(ex);
			}
			log.info("     UserAccountServiceImpl :==> getReordById ==> Ended");
			return registrationDTO;
		}

		@Override
		public RegistrationDTO saveAndUpdate(RegistrationDTO registrationDTO) throws CustomRuntimeException {
			log.info("     UserAccountServiceImpl :==> saveAndUpdate ==> Started");

			UserReg userReg = null;
			RegistrationDTO registrationDTONew = null;
			try {
				if (registrationDTO.getId() != null)
					userReg = appAdminUserRepository.getOne(registrationDTO.getId());
				else
					userReg = new UserReg();

				userReg.setId(registrationDTO.getId());
				userReg.setName(registrationDTO.getName());
				userReg.setEmail(registrationDTO.getUserLoginId());
				userReg.setUserCategory(
						userCategoryRepository.getOne(Integer.parseInt(registrationDTO.getCategoryNameId())));
				userReg.setPassword(registrationDTO.getPassword());
				UserReg returnedUserReg = appAdminUserRepository.saveAndFlush(userReg);

				registrationDTONew = new RegistrationDTO(returnedUserReg.getId(),
						returnedUserReg.getUserCategory().getDepartmentMaster().getId() + "",
						
						returnedUserReg.getUserCategory().getId() + "",returnedUserReg.getName(), returnedUserReg.getEmail(),
						returnedUserReg.getPassword());
			} catch (Exception ex) {
				throw ExceptionApplicationUtility.wrapRunTimeException(ex);
			}
			log.info("     UserAccountServiceImpl :==> saveAndUpdate ==> Ended");

			return registrationDTONew;
		}
	
	
	
	@Override
	public boolean fieldValueExists(Object value, String fieldName) throws CustomRuntimeException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean fieldValueExists(Object loginIdValue, String loginIdName, Object idValue, String id)
			throws CustomRuntimeException {
		log.info("     RegistrationServiceImpl :==> fieldValueExists ==> Started");

		boolean recordFound = false;
		try {
			Assert.notNull(loginIdName);Assert.notNull(id);
			if (!loginIdName.equals("userLoginId")&& !id.equals("id")) {
				throw ExceptionApplicationUtility.wrapRunTimeException(new UnsupportedOperationException("Field name not supported"));            
			}

			if (loginIdValue == null ) {
				return false;
			}
			if(!loginIdValue.equals("")&& idValue==null) { 
				//Case of adding new one				
				recordFound=this.appAdminUserRepository.existsByUserLoginId(loginIdValue.toString());    			
				
			}			
			if(!loginIdValue.equals("")&& idValue!=null) { 
				//Case of editing existing one				
				recordFound=this.appAdminUserRepository.existsByUserLoginIdExceptThisId(loginIdValue.toString(),Integer.parseInt(idValue.toString()));  
								
			}		
			
		} catch (Exception ex) {
			throw ExceptionApplicationUtility.wrapRunTimeException(ex);
		}
		log.info("     RegistrationServiceImpl :==> fieldValueExists ==> Ended");
		return recordFound;
	}

}
