/**
 * 
 */
package com.pon.pub.hm.service;

import com.pon.pub.hm.dto.RegistrationDTO;
import com.support.custom.exception.CustomRuntimeException;
import com.support.custom.exception.ExceptionApplicationUtility;

/**
 * @author Sanjeev
 *
 */
public class RegistrationServiceImpl implements RegistrationService{

	@Override
	public boolean isThisMailIdExists(String mailId) throws CustomRuntimeException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void saveThisOnLineVoter(RegistrationDTO registrationDTO) throws CustomRuntimeException {
		// TODO Auto-generated method stub
		
	}

	@Override
	public boolean fieldValueExists(Object value, String fieldName) throws CustomRuntimeException {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean fieldValueExists(Object loginIdValue, String loginIdName, Object idValue, String id)
			throws CustomRuntimeException {
		log.info("     UserAccountServiceImpl :==> fieldValueExists ==> Started");

		boolean recordFound = false;
		try {
			Assert.notNull(loginIdName);Assert.notNull(id);
			if (!loginIdName.equals("userLoginId")&& !id.equals("id")) {
				throw ExceptionApplicationUtility.wrapRunTimeException(new UnsupportedOperationException("Field name not supported"));            
			}

			if (loginIdValue == null ) {
				return false;
			}
			if(!loginIdValue.equals("")&& idValue==null) { 
				//Case of adding new one				
				recordFound=this.appAdminUserRepository.existsByUserLoginId(loginIdValue.toString());    			
				
			}			
			if(!loginIdValue.equals("")&& idValue!=null) { 
				//Case of editing existing one				
				recordFound=this.appAdminUserRepository.existsByUserLoginIdExceptThisId(loginIdValue.toString(),Integer.parseInt(idValue.toString()));  
								
			}		
			
		} catch (Exception ex) {
			throw ExceptionApplicationUtility.wrapRunTimeException(ex);
		}
		log.info("     UserAccountServiceImpl :==> fieldValueExists ==> Ended");
		return recordFound;
	}

}
