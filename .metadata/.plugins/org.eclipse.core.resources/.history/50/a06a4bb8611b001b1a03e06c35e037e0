/**
 * 
 */
package com.pon.pub.ec.ctrl;

import java.util.Map;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;
import com.pon.pvt.voting.dto.AssemblyBalletForEnrolledVotersDTO;
import com.pon.pvt.voting.dto.ElectionDetailDTO;
import com.pon.pvt.voting.dto.VoteDetailDTO;
import com.pon.pvt.voting.dto.VoterDetailsDTO;
import com.pon.pvt.voting.service.AssemblyBalletService;
import com.pon.pvt.voting.service.LoksabhaBalletService;
import com.support.JsonResponse.JsonResponse;
import com.support.custom.exception.CustomRuntimeException;
import com.support.custom.exception.ExceptionApplicationUtility;
import com.support.grid_pagination.DataTableResults;

/**
 * @author Sanjeev
 *
 */
@Controller
@RequestMapping("/pub/vote/")
public class OfflineBalletPaperController {
	
	static final Logger log = LoggerFactory.getLogger(OfflineBalletPaperController.class);

	@Autowired
	AssemblyBalletService assemblyBalletService;
	@Autowired
	LoksabhaBalletService loksabhaBalletService;
	
	@GetMapping("offline")	
	public String listCandidateInBalletPaper(@RequestParam(required = false) String voterId,@RequestParam(required = false) String electionType,Model model,HttpServletRequest request, HttpServletResponse response) {
		log.info("OfflineBalletPaperController :==> listCandidateInBalletPaper :==> Started");
		String target="";
		String targetA ="/vote/offlineA";
		String targetL ="/vote/offlineL";
		//Both these values will come after verifying the voter identity
		electionType="P";voterId= "10-07-45-022-0004";
		if(electionType.equals("A"))
			target=targetA;
		if(electionType.equals("P"))
			target=targetL;
		
			
		try {
		ElectionDetailDTO electionDetailDTO=assemblyBalletService.loadElectionDetails(voterId, electionType);		
		model.addAttribute(electionDetailDTO);
		VoterDetailsDTO voterDetailsDTO=assemblyBalletService.loadVotersDetails(voterId);
		
		model.addAttribute(voterDetailsDTO);
		}catch (CustomRuntimeException ex) {
			// Handle this exception
			String exceptionCause= ex.getExceptionInfo().exceptionCause;
		} catch (Exception ex) {
			CustomRuntimeException exLocal=ExceptionApplicationUtility.wrapRunTimeException(ex);
			//Handle this exception
			String exceptionCause= exLocal.getExceptionInfo().exceptionCause;
		}
		log.info("OfflineBalletPaperController :==> listCandidateInBalletPaper :==> End");
		return target;		
		
	}
	
	
	@RequestMapping(value = "offlineBalletPaperPaginated", method = RequestMethod.POST)
	@ResponseBody
	public String balletPaperPaginated( @RequestParam String voterId, HttpServletRequest request, HttpServletResponse response){
		
		log.info("OfflineBalletPaperController :==> assemblyBalletPaperPaginated :==> Started");
		
		DataTableResults<AssemblyBalletForEnrolledVotersDTO> dataTableResults=null;
		voterId= "10-07-45-022-0004";
		String electionType="A";
		try {		
			if(electionType.equals("A"))
			   dataTableResults = assemblyBalletService.loadElectionBalletPaperGrid(voterId, request);
			
			if(electionType.equals("P"))
				   dataTableResults = loksabhaBalletService.loadElectionBalletPaperGrid(voterId, request);
			
		}
		catch (CustomRuntimeException ex) {
			// Handle this exception
			String exceptionCause= ex.getExceptionInfo().exceptionCause;
		} catch (Exception ex) {
			CustomRuntimeException exLocal=ExceptionApplicationUtility.wrapRunTimeException(ex);
			//Handle this exception
			String exceptionCause= exLocal.getExceptionInfo().exceptionCause;
		}
		log.info("OfflineBalletPaperController :==> assemblyBalletPaperPaginated :==> Started");
		return new Gson().toJson(dataTableResults);
	}
	
	@RequestMapping(value = "receiveVote", method = RequestMethod.POST)
	@ResponseBody
	public String receiveVote( @RequestBody @Valid VoteDetailDTO voteDetailDTO, BindingResult result, HttpServletRequest request, HttpServletResponse response){
		
		log.info("OfflineBalletPaperController :==> receiveVote :==> Started");		
		JsonResponse jsonResponse = new JsonResponse();		

		try {
			if (result.hasErrors()) {
				// Get error message
				Map<String, String> errors = result.getFieldErrors().stream()
						.collect(Collectors.toMap(FieldError::getField, FieldError::getDefaultMessage));
                System.out.println("errors = "+errors);
				jsonResponse.setStatus(false);
				jsonResponse.setStatusMsg("Error found");
				jsonResponse.setFieldErrMsgMap(errors);

			} else {
				// Implement business logic to save record into database			
				jsonResponse.setFormObject(assemblyBalletService.castVote(voteDetailDTO));
				jsonResponse.setStatus(true);
				jsonResponse.setStatusMsg("You've casted your vote. An acknowledgement message has been sent both at mail and your mobile no.");
			} 
		}
		catch (CustomRuntimeException ex) {
			// Handle this exception
			String exceptionCause= ex.getExceptionInfo().exceptionCause;
			jsonResponse.setStatus(false);
			jsonResponse.setStatusMsg(exceptionCause);
		} catch (Exception ex) {
			CustomRuntimeException exLocal=ExceptionApplicationUtility.wrapRunTimeException(ex);
			//Handle this exception
			String exceptionCause= exLocal.getExceptionInfo().exceptionCause;
			jsonResponse.setStatus(false);
			jsonResponse.setStatusMsg(exceptionCause);
		}
		log.info("OfflineBalletPaperController :==> receiveVote :==> Started");
		return new Gson().toJson(jsonResponse);
	}

	
}
