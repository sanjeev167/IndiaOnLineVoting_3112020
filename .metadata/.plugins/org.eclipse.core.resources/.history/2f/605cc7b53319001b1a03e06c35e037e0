/**
 * 
 */
package com.pon.pvt.voter.ctrl;

import java.util.Map;
import java.util.stream.Collectors;

import javax.persistence.metamodel.SetAttribute;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;
import com.pon.pub.hm.dto.RegistrationDTO;
import com.pon.pub.hm.service.RegistrationService;
import com.pon.pvt.voter.dto.VoteLockinigDTO;
import com.pon.pvt.voter.service.VoteLockinigService;
import com.support.JsonResponse.JsonResponse;
import com.support.custom.exception.CustomRuntimeException;
import com.support.custom.exception.ExceptionApplicationUtility;

/**
 * @author Sanjeev
 *
 */
@Controller
@RequestMapping("/pvt/voter/")
public class LockYourOnlineVoteController {
	static final Logger log = LoggerFactory.getLogger(LockYourOnlineVoteController.class);

	@Autowired
	VoteLockinigService voteLockinigService;
	@Autowired
	RegistrationService registrationService;

	@GetMapping("lock_vote")
	public String lockVote(Model model, HttpServletRequest request, HttpServletResponse response) {
		log.info("LockYourOnlineVoteController :==> lockVote :==> Started");
		/*
		 * Object principal =
		 * SecurityContextHolder.getContext().getAuthentication().getPrincipal(); String
		 * username=null;â€‹ if (principal instanceof UserDetails) { username =
		 * ((UserDetails)principal). getUsername(); } else { username = principal.
		 * toString(); }
		 * 
		 * RegistrationDTO
		 * registrationModal=registrationService.loadByLoginId(username);
		 */
		RegistrationDTO registrationModal;
		try {
			registrationModal = registrationService.loadByLoginId("modi@gmail.com");
			model.addAttribute(registrationModal);
		} catch (CustomRuntimeException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		log.info("LockYourOnlineVoteController :==> lockVote :==> Ended");
		return "/voter/lock_vote";
	}

	@PostMapping("")
	@ResponseBody
	public String verifyVotingSecret(@RequestParam String secret, HttpServletRequest request,
			HttpServletResponse response) {
		log.info("OnlineRegistrationController :==> verifyVotingSecret :==> Started");
		JsonResponse jsonResponse = new JsonResponse();
		try {
			String status[] = voteLockinigService.verifyVoterId(secret);
			if (status[0].equals("1")) {
				jsonResponse.setStatus(true);
				jsonResponse.setStatusMsg(status[1]);
			} else {
				jsonResponse.setStatus(false);
				jsonResponse.setStatusMsg(status[1]);
			}
		} catch (CustomRuntimeException ex) {
			// . Handle this exception
			String exceptionCause = ex.getExceptionInfo().exceptionCause;
			jsonResponse.setStatus(false);
			jsonResponse.setStatusMsg(exceptionCause);
		} catch (Exception ex) {
			CustomRuntimeException exLocal = ExceptionApplicationUtility.wrapRunTimeException(ex);
			// Handle this exception
			String exceptionCause = exLocal.getExceptionInfo().exceptionCause;
			jsonResponse.setStatus(false);
			jsonResponse.setStatusMsg(exceptionCause);
		}
		log.info("OnlineRegistrationController :==> verifyVotingSecret :==> End");
		return new Gson().toJson(jsonResponse);

	}

	@PostMapping("verifyMobileOtp")
	@ResponseBody
	public String verifyMobileOtp(@RequestParam String mobileOtp, HttpServletRequest request,
			HttpServletResponse response) {
		log.info("OnlineRegistrationController :==> verifyMobileOtp :==> Started");
		JsonResponse jsonResponse = new JsonResponse();
		try {
			String status[] = voteLockinigService.verifyMobileOtp(mobileOtp);
			if (status[0].equals("1")) {
				jsonResponse.setStatus(true);
				jsonResponse.setStatusMsg(status[1]);
			} else {
				jsonResponse.setStatus(false);
				jsonResponse.setStatusMsg(status[1]);
			}
		} catch (CustomRuntimeException ex) {
			// . Handle this exception
			String exceptionCause = ex.getExceptionInfo().exceptionCause;
			jsonResponse.setStatus(false);
			jsonResponse.setStatusMsg(exceptionCause);
		} catch (Exception ex) {
			CustomRuntimeException exLocal = ExceptionApplicationUtility.wrapRunTimeException(ex);
			// Handle this exception
			String exceptionCause = exLocal.getExceptionInfo().exceptionCause;
			jsonResponse.setStatus(false);
			jsonResponse.setStatusMsg(exceptionCause);
		}
		log.info("OnlineRegistrationController :==> verifyMobileOtp :==> End");
		return new Gson().toJson(jsonResponse);

	}

	@PostMapping("verifyMailOtp")
	@ResponseBody
	public String verifyMailOtp(@RequestParam String mailOtp, HttpServletRequest request,
			HttpServletResponse response) {
		log.info("OnlineRegistrationController :==> verifyMailOtp :==> Started");
		JsonResponse jsonResponse = new JsonResponse();
		try {
			String status[] = voteLockinigService.verifyMailOtp(mailOtp);
			if (status[0].equals("1")) {
				jsonResponse.setStatus(true);
				jsonResponse.setStatusMsg(status[1]);
			} else {
				jsonResponse.setStatus(false);
				jsonResponse.setStatusMsg(status[1]);
			}
		} catch (CustomRuntimeException ex) {
			// . Handle this exception
			String exceptionCause = ex.getExceptionInfo().exceptionCause;
			jsonResponse.setStatus(false);
			jsonResponse.setStatusMsg(exceptionCause);
		} catch (Exception ex) {
			CustomRuntimeException exLocal = ExceptionApplicationUtility.wrapRunTimeException(ex);
			// Handle this exception
			String exceptionCause = exLocal.getExceptionInfo().exceptionCause;
			jsonResponse.setStatus(false);
			jsonResponse.setStatusMsg(exceptionCause);
		}
		log.info("OnlineRegistrationController :==> verifyMailOtp :==> End");
		return new Gson().toJson(jsonResponse);

	}

	@PostMapping("lockUnlockVote")
	@ResponseBody
	public String lockUnlockVote(@RequestBody @Valid VoteLockinigDTO voteLockinigDTO, BindingResult result,
			HttpServletRequest request, HttpServletResponse response) {
		log.info("OnlineRegistrationController :==> lockUnlockVote :==> Started");
		JsonResponse jsonResponse = new JsonResponse();
		try {
			if (result.hasErrors()) {
				// Get error message
				Map<String, String> errors = result.getFieldErrors().stream()
						.collect(Collectors.toMap(FieldError::getField, FieldError::getDefaultMessage));

				jsonResponse.setFieldErrMsgMap(errors);
				jsonResponse.setStatus(false);
				jsonResponse.setStatusMsg("Error found");

			} else {
				String status[] = voteLockinigService.lockUnlockVote(voteLockinigDTO);
				if (status[0].equals("1")) {
					jsonResponse.setStatus(true);
					jsonResponse.setStatusMsg(status[1]);
				} else {
					jsonResponse.setStatus(false);
					jsonResponse.setStatusMsg(status[1]);
				}
			}
		} catch (CustomRuntimeException ex) {
			// . Handle this exception
			String exceptionCause = ex.getExceptionInfo().exceptionCause;
			jsonResponse.setStatus(false);
			jsonResponse.setStatusMsg(exceptionCause);
		} catch (Exception ex) {
			CustomRuntimeException exLocal = ExceptionApplicationUtility.wrapRunTimeException(ex);
			// Handle this exception
			String exceptionCause = exLocal.getExceptionInfo().exceptionCause;
			jsonResponse.setStatus(false);
			jsonResponse.setStatusMsg(exceptionCause);
		}
		log.info("OnlineRegistrationController :==> lockUnlockVote :==> End");
		return new Gson().toJson(jsonResponse);

	}

}
