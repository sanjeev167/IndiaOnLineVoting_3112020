/**
 * 
 */
package com.pon.pub.hm.ctrl;

import java.util.Map;
import java.util.stream.Collectors;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.Gson;
import com.pon.pub.hm.dto.LoginDTO;
import com.pon.pub.hm.dto.RegistrationModal;
import com.pon.pvt.master.dto.AssemblyCandidateMasterDTO;
import com.support.JsonResponse.JsonResponse;
import com.support.custom.exception.CustomRuntimeException;
import com.support.custom.exception.ExceptionApplicationUtility;

/**
 * @author Sanjeev
 *
 */
@Controller
@RequestMapping("/pub/hm/login/")
public class LoginController {
	static final Logger log = LoggerFactory.getLogger(LoginController.class);
	
	@RequestMapping(value = "", method = RequestMethod.GET)
	public String loginFieldsCheck(RegistrationModal registrationModal,HttpServletRequest request, HttpServletResponse response) {
		log.info("LoginController :==> loginFieldsCheck :==> Started");
		String target = "/register";
		log.info("LoginController :==> loginFieldsCheck :==> End");
		return target;
	}
	
	@RequestMapping(value = "", method = RequestMethod.POST)
	@ResponseBody
	public String loginFieldsCheck(@RequestBody @Valid LoginDTO loginDTO, BindingResult result,HttpServletRequest request, HttpServletResponse response) {
		log.info("LoginController :==> loginFieldsCheck :==> Started");
		JsonResponse jsonResponse = new JsonResponse();
		try {
			if (result.hasErrors()) {
				// Get error message
				Map<String, String> errors = result.getFieldErrors().stream()
						.collect(Collectors.toMap(FieldError::getField, FieldError::getDefaultMessage));
				
				//System.out.println(errors);
				jsonResponse.setStatus(false);
				jsonResponse.setStatusMsg("Error found");
				jsonResponse.setFieldErrMsgMap(errors);
			} else {
				// Implement business logic to save record into database
				jsonResponse.setFormObject(loginService.saveAndUpdate(loginDTO));
				jsonResponse.setStatus(true);
				jsonResponse.setStatusMsg("Record has been saved or updated successfully.");
			}
		} catch (CustomRuntimeException ex) {
			// Handle this exception
			String exceptionCause= ex.getExceptionInfo().exceptionCause;
			jsonResponse.setStatus(false);
			jsonResponse.setStatusMsg(exceptionCause);
		} catch (Exception ex) {
			CustomRuntimeException exLocal=ExceptionApplicationUtility.wrapRunTimeException(ex);
			//Handle this exception
			String exceptionCause= exLocal.getExceptionInfo().exceptionCause;
			jsonResponse.setStatus(false);
			jsonResponse.setStatusMsg(exceptionCause);
		}
		log.info("LoginController :==> loginFieldsCheck :==> End");
		return new Gson().toJson(jsonResponse);
	}
}
